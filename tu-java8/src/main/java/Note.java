
/**
 * User zhongmeng-lizhaohong
 * Date 2020/10/21
 * Description:
 */
public class Note {
    /**
     * java8新特性：
     * 1.函数式接口
     * 2.lambda表达式
     * 3.方法引用/构造器引用
     * 4.stream Api
     * 5.接口的增强
     * 6.Optional类
     * 7.新的时间和日期API
     * 8.使用jjs执行js程序
     */

    /**
     * Lambda表达式的使用
     * 1.格式：
     * -> :lambda操作符
     * ->左边: lambda形参列表
     * ->右边：lambda体
     *
     * 2.lambda表达式的使用(六种情况):
     * a.无参数，无返回值
     * b.需要一个参数，但是没有返回值
     * c.数据类型可以省略，因为可由编译器推断得出，称为类型推断
     * d.lambda 若只需要一个参数，参数的小括号可以省略
     * e.lambda 需要两个或以上的参数，多条执行语句，并且可以有返回值
     * f.lambda体只有一条语句时，return与大括号若有，都可以省略
     * 总结：
     *      左边：lambda形参列表的参数类型可以省略（类型推断）；如果lambda形参列表只有一个参数，其括号也可以省略
     *      右边：lambda体应该有一对{}包裹；如果lambda体只有一条执行语句（也可能是return语句），省略这一对{}和return
     * 3.lambda表达式的本质：作为函数式接口的实例
     */

    /**
     *  函数式接口：如果一个接口中只声明了一个抽象方法，则此接口就称为函数式接口
     *  用匿名内部类写的都可以用lambda表达式
     *  java内置四大核心函数式接口：
     *  1.Consumer<T> void accept(T t)
     *  2.Supplier<T> T get()
     *  3.Function<T,R> R apply(T t)
     *  4.Predicate<T> boolean test(T t)
     *  更多内置的函数式接口在java.util.function下
      */

    /**
     * 方法引用：
     * 1.使用情景：当要传递给lambda体的操作，已经有实现的方法了，可以使用方法引用
     * 2.方法引用，本质上就是lambda表达式，而lambda表达式作为函数式接口的实例,所以方法引用也是函数式接口的实例
     * 3.使用格式： 类（或对象）:: 方法名
     * 4.具体分为如下三种情况：
     *      对象：：非静态方法
     *      类：：静态方法
     *      类：：非静态方法
     * 5.方法引用使用的要求：要求接口中的抽象方法的形参列表和返回值类型与方法引用的方法的形参列表和返回值类型相同（针对情况1和2）
     * 6.构造器引用和数组引用
     *      构造器引用：和方法引用蕾丝，函数式接口的抽象方法的形参列表和构造器的形参列表一致，返回值类型即为构造器所属的类的类型。
     * 7.数组引用：其实数组也是一个特殊的类。
     *
     *
     */
}
